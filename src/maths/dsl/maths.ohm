Math {
  ExpList
    = Exp*

  Exp
    = Assign  -- decl
    | Vect    -- vect
    | Add     -- add
    | Mul     -- mul
    | Pow     -- pow
    | Paren   -- paren
    | LVar    -- funcall
    | ident   -- name
    | number  -- num

  Assign
    = ident ArgList "=" Exp   -- func
    | ident "=" Exp           -- const

  LVar
    = ident ArgList   -- func
    | ident           -- name
  
  ArgList
    = "(" ident ("," ident)*  ")"

  Vect
    = "[" Exp ("," Exp)*  "]"

  Add
    = Exp "+" Exp  -- plus
    | Exp "-" Exp  -- minus

  Mul
    = Exp "*" Exp  -- times
    | Exp "/" Exp  -- divide

  Pow
    = Exp "^" Exp

  Paren
    = "(" Exp ")" -- paren
    | "+" Exp     -- pos
    | "-" Exp     -- neg

  ident  (an identifier)
    = letter alnum*

  number  (a number)
    = digit* "." digit+  -- fract
    | digit+             -- whole
}
