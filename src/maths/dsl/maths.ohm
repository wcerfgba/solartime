Math {
  Exp
    = Assign  -- decl
    | Vect  -- bareexpr

  Assign
    = LVar "=" Vect

  LVar
    = ident ArgList  -- func
    | ident
  
  ArgList
    = "(" ident ("," ident)*  ")"

  Vect
    = "[" AddExp ("," AddExp)*  "]"  -- vect
    | AddExp

  AddExp
    = AddExp "+" MulExp  -- plus
    | AddExp "-" MulExp  -- minus
    | MulExp

  MulExp
    = MulExp "*" ExpExp  -- times
    | MulExp "/" ExpExp  -- divide
    | ExpExp

  ExpExp
    = PriExp "^" ExpExp  -- power
    | PriExp

  PriExp
    = "(" Exp ")"  -- paren
    | "+" PriExp   -- pos
    | "-" PriExp   -- neg
    | LVar -- funcall
    | ident
    | number

  ident  (an identifier)
    = letter alnum*

  number  (a number)
    = digit* "." digit+  -- fract
    | digit+             -- whole
}
